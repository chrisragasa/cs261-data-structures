Christopher Ragasa
CS 261 - Programming Assignment 2
Part 2: Amortized Analysis of the Dynamic Array

---

1. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?


Capacity 8, Size 0

+8 time units to fill array to capacity
Capacity 8, Size 8

+9 time units. 8 to copy over elements, 1 to add new element.
Capacity 16, Size 9

+7 time units to fill array to capacity
Capacity 16, Size 16

+17 time units. 16 to copy over elements, 1 to add new element.
Capacity 32, Size 17

+15 time units to fill array to capacity
Capacity 32, Size 32

Total Time Units for 32 consecutive push operations: 8 + 9 + 7 + 17 + 15 = 56

Under this strategy, the big-oh complexity of a push is O(1)+.



2. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?


Capacity 8, Size 0

+8 time units to fill array to capacity
Capacity 8, Size 8

+9 units. 8 to copy over elements, 1 to add new element.
Capacity 10, Size 9

+1 time unit to fill array to capacity
Capacity 10, Size 10

+11 units. 10 to copy over elements, 1 to add new element.
Capacity 12, Size 11

+1 time unit to fill array to capacity
Capacity 12, Size 12

+13 units. 12 to copy over elements, 1 to add new element.
Capacity 14, Size 13

+1 time unit to fill array to capacity
Capacity 14, Size 14

+15 units. 14 to copy over elements, 1 to add new element.
Capacity 16, Size 15

+1 time unit to fill array to capacity
Capacity 16, Size 16

+17 units. 16 to copy over elements, 1 to add new element.
Capacity 18, Size 17

+1 time unit to fill array to capacity
Capacity 18, Size 18

+19 units. 18 to copy over elements, 1 to add new element.
Capacity 20, Size 19 

+1 time unit to fill array to capacity
Capacity 20, Size 20

+21 units. 20 to copy over elements, 1 to add new element.
Capacity 22, Size 21

+1 time unit to fill array to capacity
Capacity 22, Size 22

+23 units. 22 to copy over elements, 1 to add new element.
Capacity 24, Size 23

+1 time unit to fill array to capacity
Capacity 24, Size 24

+25 units. 24 to copy over elements, 1 to add new element.
Capacity 26, Size 25

+1 time unit to fill array to capacity
Capacity 26, Size 26

+27 units. 26 to copy over elements, 1 to add new element.
Capacity 28, Size 227

+1 time unit to fill array to capacity
Capacity 28, Size 28

+29 units. 28 to copy over elements, 1 to add new element.
Capacity 30, Size 29 

+1 time unit to fill array to capacity
Capacity 30, Size 30

+31 units. 30 to copy over elements, 1 to add new element.
Capacity 32, Size 31

+1 time unit to fill array to capacity
Capacity 32, Size 32

Total Time Units for 32 consecutive push operations: 
8 + 9 + 1 + 11 + 1 + 13 + 1 + 15 + 1 + 17 + 1 + 19 + 1 + 21 + 1 + 23 + 1 + 25 + 1 + 27 + 1 + 29 + 1 + 31 + 1 = 260

Under this strategy, the big-oh complexity of a push is O(n)+.
